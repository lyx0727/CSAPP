                            | # Execution begins at address 0
0x000:                      | .pos 0
0x000: 30f40001000000000000 |     irmovq stack,%rsp
0x00a: 804800000000000000   |     call main
0x013: 00                   |     halt
                            | 
                            | # Sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048:                      | main:   
0x048: 30f71800000000000000 |     irmovq ele1, %rdi
0x052: 805c00000000000000   |     call rsum_list
0x05b: 90                   |     ret
                            | 
                            | # long rsum_list(list_ptr ls)
0x05c:                      | rsum_list:
0x05c: 30f00000000000000000 |     irmovq 0x0, %rax
0x066: 6277                 |     andq %rdi, %rdi        # if(!ls) return 0;
0x068: 739400000000000000   |     je return
0x071: a06f                 |     pushq %rsi
0x073: 50670000000000000000 |     mrmovq 0x0(%rdi), %rsi # int val = ls->val; 
0x07d: 50770800000000000000 |     mrmovq 0x8(%rdi), %rdi # ls = ls->next;
0x087: 805c00000000000000   |     call rsum_list
0x090: 6060                 |     addq %rsi, %rax        # val += rsum_list(ls);
0x092: b06f                 |     popq %rsi
0x094:                      | return:
0x094: 90                   |     ret
                            | 
0x100:                      |     .pos 0x100
0x100:                      | stack:
                            | 
